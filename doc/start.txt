https://code.visualstudio.com/docs
https://marketplace.visualstudio.com/vscode
https://www.customguide.com/quick-references
https://visualstudio.microsoft.com/keyboard-shortcuts.pdf
https://stackoverflow.com/questions/71924077/configuring-task-json-and-launch-json-for-c-in-vs-code
https://code.visualstudio.com/docs/cpp/launch-json-reference
https://vscode-docs.readthedocs.io/en/stable/languages/json/
I've recently had the same issues. Here is the procedure that I follow, that seem to work:

Download and install msys2 (1)
Download MSYS2 from https://www.msys2.org/

Install folder is typically C:\msys64

Go to C:\msys64 and open mingw64.ini

Change ‘#MSYS2_PATH_TYPE=inherit’ to ‘MSYS2_PATH_TYPE=inherit’ i.e. enable PATH variable.

Add PATH environment variables (2)
Type “environment” in Windows search field, and select “Edit environment variables …”

Add path to gcc.exe and g++.exe: — Add: “C:\msys64\mingw64\bin” to PATH variable.

Add path to VS Code to PATH variable as well: — This is usually the folder:

C:\Users\<username>\AppData\Local\Programs\Microsoft VS Code\
Run “msys2 mingw64” and test access to compilers and debugger (3)
In Windows Search field, type “msys2” and select “msys2 mingw64” and run the following:

To install gcc, the Gnu C compiler: pacman -S mingw-w64-ucrt-x86_64-gcc

To install gdb, the Gnu GDB debugger:

pacman -S --needed base-devel mingw-w64-x86_64-toolchain
To test that you can run compilers and debugger, run:

gcc --version
g++ --version
gdb --version
Start development in VSC (4)
Open “msys mingw64” terminal and run:

cd <common projects folder> 
mkdir <projname> 
cd <projname> 
Above changes current directory to a projects folder. I use C:\Users<username>\src\projects, i.e. this is my but you may want to use something else.

In the folder you can make a subfolder per C coding project you want to run. This is what “mkdir ” does.

You will need a little Unix Bash shell command skills here, here is an ultrashort summary:

cd – change directory to mkdir – makes a new directory called
in the current folder.
cd .. – change directory one up. _ cd ~ – changes directory to your home folder, I have C:\Users<username> where is my … username.
pwd – shows current directory.
Now, if you did above you are currently in the specific projects folder (you can verify this with pwd), and you should start VSC from there by typing:

code .
And accept Workspace trust.

Create a C source file (5)
Open folder view, click on + icon, and select ‘new file’, type “hello.c”, go into the file and add the contents:

include
int main() {
   printf("Hello World\n");
   return 0;
}
Configure VSC for building – tasks.json (6)
Press “ctrl+shift+B” to build target (or menu: -> Terminal -> Run Build Task… or press green play icon)

Select “C/C++: gcc.exe build and debug active file”

Now it tries to build, using an autogenerated tasks.json file, located in project-folder, in subfolder .vscode:

.vscode/tasks.json
An example of a tasks.json file is shown below:

  "tasks": [
  {
    "type": "cppbuild",
    "label": "C/C++: gcc.exe build active file", 
    "command": "C:\apps\msys64\mingw64\bin\gcc.exe",
    "args": [
      "-fdiagnostics-color=always",
      "-Wall",
      "-g",
      "${file}", 
      "-o",
      "${fileDirname}\${fileBasenameNoExtension}.exe"
    ],
  "options": {
  "cwd": "${fileDirname}"
  },
  "problemMatcher": [
    "$gcc"
  ],
  "group": {
    "kind": "build",
    "isDefault": true
    },
      "detail": "Task generated by Debugger."
    }
  ],
  "version": "2.0.0"
}
The important section is:

"command": "C:\msys64\mingw64\bin\gcc.exe",
"args": [
"-fdiagnostics-color=always",
"-Wall",
"-g",
"${workspaceFolder}/*.c", OR TODO "${file}"
"-o",
"${fileDirname}\${fileBasenameNoExtension}.exe"
],
“command” is the Gnu C compiler, gcc.exe and the full path to it.
“args” are arguments for the compiler:
-Wall means warn about everyting.
-g means compiler must prepare for debugging.
“${file}” is current file.
-o is output file which is specified in the next line with .exe extension.
Sometimes we have to build multi-file projects and it will break the default build-functionality in tasks.json in VSC. In some cases this can be solved by changing:

${file},
to

"${workspaceFolder}/*.c",
Configure VSC for Debugging – launch.json (7)
Go to source file hello.c, and set a break point, Click left to the line numbers to set red circle. Select play/bug icon Select “Debug C/C++ File” Choose “C/C++ gcc build and debug active file” from list of automatically detected compilers.

This will autogenerate a file, launch.json in the projects folder, in subfolder .vscode:

.vscode/launch.json
An example of a launch.json file is shown below:

{
  "configurations": [
  {
    "name": "C/C++: gcc.exe build and debug active file",
    "type": "cppdbg",
    "request": "launch",
    "program": "${fileDirname}\${fileBasenameNoExtension}.exe",
    "args": [],
    "stopAtEntry": false,
    "cwd": "${fileDirname}",
    "environment": [],
    "externalConsole": false,
    "MIMode": "gdb",
  "miDebuggerPath": "C:\\msys64\\mingw64\\bin\\gdb.exe",
  "setupCommands": [
  {
    "description": "Enable pretty-printing for gdb",
    "text": "-enable-pretty-printing",
    "ignoreFailures": true
  },
 ]
}
],
"preLaunchTask": "C/C++: gcc.exe build active file"
}
The most important parts are:

"program": "${fileDirname}\${fileBasenameNoExtension}.exe", 
and

"miDebuggerPath": "C:\\msys64\\mingw64\\bin\\gdb.exe",
The “program” is the program generated when building the project. I.e. the output from running the task as specified in Tasks.json.

The miDebuggerPath is the path to gdb, the GNU gdb debugger.

If these does not match with your Tasks.json settings and your installation chances are slim to make it work.

Test it by pressing the Play/Bug icon button and notice if there are errors. If not you should be able to step through the code and watch variables etc.

Configure VSC for intellisense (8)
Install extension: “C/C++ extension for VS Code” by Microsoft.

Now this extension will assist when you type code. By example you can type for to get the basics of a for-loop. Similar for if, while etc. Cool!

Save work when creating new projects (9)
Instead of having to create the tasks.json and launch.json files for each project, I copy them to a templates folder, say:

C:\Users\username\src\templates\.vscode\ 
Copy the newly created tasks.json and launch.json files to the .vscode subfolder.

Now, say you want to create a new project, e.g. hello2, and you create a folder for it:

C:\Users\<username>\src\projects\hello2\ 
Go to the templates folder by

cd C:\Users<username>\src\templates and copy the .json files to the new project by:

cp -Rp .vscode/ ../hello2/
And now the new project has the .json files.
Optional (10)
Later you may want to update msys2. To do this, open “msys2 mingw64” and type

pacman -Suy
Done (11)
Finally done … Not the easiest thing to get going, but I still think it is worth it.